{"version":3,"sources":["components/common/FormControls/FormControls.module.css","components/common/FormControls/FormControlsWithFormik.js","components/common/FormControls/FormControls.jsx","components/Login/login.module.css","utils/validators/validators.js","components/Login/LoginForm.js","components/Login/LoginWithFormik.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["module","exports","Textarea","props","label","name","key","rest","className","classes","formik_controls","htmlFor","as","id","component","ErrorText","Input","CheckBoxes","options","field","map","option","Fragment","type","value","checked","includes","error","children","FormControlsWithFormik","control","FormControl","input","meta","child","hasError","touched","restProps","createField","placeholder","validators","text","validate","maxLength","required","maxLength30","length","reduxForm","form","handleSubmit","captchaUrl","backgroundColor","onSubmit","form_error","src","alt","LoginWithFormik","checkboxOptions","validationSchema","Yup","email","password","rememberMe","initialValues","formik","disabled","isValid","Login","isAuth","to","login","formData","loginThunk","captcha","LoginContainer","this","React","Component","connect","state","auth"],"mappings":"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","file":"static/js/7.d700c570.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls__4c7Yh\",\"error\":\"FormControls_error__uKFST\",\"App\":\"FormControls_App__3XoIW\",\"input\":\"FormControls_input__229Xk\",\"forms_control\":\"FormControls_forms_control__1AmpX\"};","import React from 'react';\r\nimport classes from './FormControls.module.css';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\nconst FormControlsWithFormik = (props) => {\r\n    const { control, ...rest } = props;\r\n    switch (control) {\r\n        case 'input':\r\n            return <Input {...rest} />\r\n        case 'textarea':\r\n            return <Textarea {...rest} />\r\n        case 'checkbox':\r\n           return <CheckBoxes {...rest} />\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nconst Textarea = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field as='textarea' key={key} id={name} name={name} {...rest}/>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\nconst Input = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field id={name} key={key} name={name} {...rest} />\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst CheckBoxes = (props) => {\r\n    const { label, name, options, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label>{label}</label>\r\n           <Field name={name} {...rest}>\r\n                {\r\n                    ({field}) => {\r\n                      return options.map(option => {\r\n                          return (\r\n                          <React.Fragment key={option.key}>\r\n                             <input \r\n                                type=\"checkbox\"\r\n                                id={option.value}\r\n                                {...field}\r\n                                value={option.value}\r\n                                checked={field.value.includes(option.value)}\r\n                             />\r\n                             <label htmlFor={option.value}>{option.key}</label>\r\n                          </React.Fragment>\r\n                            )\r\n                    \r\n                      })\r\n                    }\r\n                }\r\n           </Field>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst ErrorText = (props) => {\r\n    return <div className={classes.error} >\r\n        {props.children}\r\n    </div>\r\n}\r\n    \r\n    \r\n\r\n\r\nexport default FormControlsWithFormik;","import classes from './FormControls.module.css';\r\nimport React from 'react';\r\nimport { Field } from 'redux-form';\r\n\r\nconst FormControl = ({ input, meta, child, ...props }) => {\r\n\r\n    let hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span >{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return (\r\n        <div>\r\n            <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return (\r\n        <div>\r\n            <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport const createField = (placeholder, validators, name, component, props = {}, text = '') => (\r\n    <div>\r\n         <Field placeholder={placeholder} validate={validators} name={name} component={component} {...props} />{text}\r\n    </div>\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_item\":\"login_form_item__2hksY\",\"form_error\":\"login_form_error__1vVX3\"};","export const required = value => {\r\n    if(value) return undefined;\r\n\r\n    return 'Field is required';\r\n}\r\n\r\n\r\nexport const maxLengthCreator= (maxLength) => (value) => {\r\n    if(value.length > maxLength) return `max length ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}","import React from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Input, createField } from '../common/FormControls/FormControls';\r\nimport classes from './login.module.css';\r\n\r\nlet maxLength30 = maxLengthCreator(30);\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n  return (\r\n    <div backgroundColor='white'>\r\n      <form onSubmit={handleSubmit}>\r\n       {createField('Email', [required, maxLength30], 'email', Input)}\r\n       {createField('Password', [required, maxLength30], 'password', Input, {type: 'password'})}\r\n       {createField(null, [], 'checkbox', Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n        {error && <div className={classes.form_error}>\r\n          {error}\r\n        </div>}\r\n\r\n        <div>\r\n            {captchaUrl && <img src={captchaUrl} alt='captchaUrl'/> }\r\n            {captchaUrl && createField('Write symbols from image', [required], 'captcha', Input)}\r\n         \r\n        </div>\r\n        <div>\r\n          <button>Log In</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport const LoginReduxForm = reduxForm({\r\n  // a unique name for the form\r\n  form: 'login'\r\n})(LoginForm)","import React from 'react';\r\nimport * as Yup from 'yup';\r\nimport { Formik, Form } from 'formik';\r\nimport FormControlsWithFormik from '../common/FormControls/FormControlsWithFormik';\r\n\r\n\r\n const LoginWithFormik = ({onSubmit, captchaUrl}) => {\r\n\r\n  const checkboxOptions = [\r\n    {key: ' ' , value: ' '}\r\n   \r\n]\r\n\r\n  \r\n  const initialValues = {\r\n    email: '',\r\n    password: '',\r\n    rememberMe: []\r\n  }\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email('Invalid email format').required('Required field!'),\r\n    password: Yup.string().required('Required field!'),\r\n    rememberMe: Yup.array().required('Required field!'),\r\n  });\r\n\r\n  \r\n\r\n  return (\r\n    <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n      {\r\n        formik => {\r\n          return <Form>\r\n            <FormControlsWithFormik control='input' type='email' name='email' placeholder='Enter your email' label='Email: free@samuraijs.com' />\r\n            <FormControlsWithFormik control='input' type='password' name='password' placeholder='Enter your password' label='Password: free' />\r\n            <FormControlsWithFormik control='checkbox' name='rememberMe' label='Remember me?' options={checkboxOptions} /> \r\n            {captchaUrl && <img src={captchaUrl} alt='captchaUrl'/> }\r\n            {captchaUrl && <FormControlsWithFormik control='input' placeholder='Write symbols from image' name='captcha' label='Captcha'/>}\r\n            <button type='submit' disabled={!formik.isValid}>Submit</button>\r\n          </Form>\r\n        }\r\n      }\r\n    </Formik>);\r\n}\r\n\r\nexport default LoginWithFormik;\r\n","import React from 'react';\r\nimport classes from './login.module.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { LoginReduxForm } from './LoginForm';\r\nimport LoginWithFormik from './LoginWithFormik';\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n  const onSubmit = (formData) => {\r\n    props.loginThunk(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={'/'} />\r\n  } \r\n\r\n  return <div className={classes.login} >\r\n    <h2>LOGIN</h2>\r\n    <LoginWithFormik onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n  </div>\r\n  }\r\n\r\nexport default Login;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loginThunk } from '../../reduxx/auth-reducer';\r\nimport Login from './Login';\r\n\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n    render() {\r\n        return <Login\r\n            captchaUrl={this.props.captchaUrl}\r\n            isAuth={this.props.isAuth}\r\n            loginThunk={this.props.loginThunk} />\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { loginThunk })(LoginContainer);"],"sourceRoot":""}