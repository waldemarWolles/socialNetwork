{"version":3,"sources":["components/common/withAuthRedirect.tsx","components/common/FormControls/FormControlsWithFormik.tsx","components/common/FormControls/FormControls.module.css","components/Messages/Messages.module.css","components/Messages/DialogItem.tsx","components/Messages/Message.tsx","components/Messages/MessagesForm.tsx","reduxx/messages-selectors.ts","components/Messages/MessagesContainer.tsx","components/Messages/Messages.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","Textarea","label","name","key","rest","className","classes","formik_controls","htmlFor","as","id","component","ErrorText","Input","error","children","FormControlsWithFormik","control","module","exports","DialogItem","item","src","UserImg","alt","Message","message","AddMessageFormik","onSubmit","initialValues","newMessageText","validationSchema","Yup","required","max","values","resetForm","input","placeholder","button","type","getDialogs","messagesPage","dialogs","getMessages","messages","useSelector","dispatch","useDispatch","dialogsElements","map","dialog","messagesElements","messagesArticle","messages_form","actionsMessagesReducer","addMessageActionCreator"],"mappings":"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","file":"static/js/8.3c02fbe9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppRootStateType } from '../../reduxx/redux-store';\r\n\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    \r\n\r\n    const RedirectComponent: React.FC<MapStatePropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to='/login' />\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n\r\n\r\n\r\n    return connect<MapStatePropsType, unknown, WCP, AppRootStateType>(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n","import React from 'react';\r\nimport classes from './FormControls.module.css';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\ntype FormControlPropsType = {\r\n    control: 'input' | 'textarea'\r\n}\r\n\r\ntype FormItemPropsType = {\r\n    label?: string\r\n    name: string\r\n    key?: string\r\n    placeholder: string\r\n    type?: string\r\n    className?: string\r\n}\r\n\r\nconst FormControlsWithFormik: React.FC<FormControlPropsType & FormItemPropsType> = (props) => {\r\n    const { control, ...rest } = props;\r\n    switch (control) {\r\n        case 'input':\r\n            return <Input {...rest} />\r\n        case 'textarea':\r\n            return <Textarea {...rest} />\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nconst Textarea: React.FC<FormItemPropsType>  = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field as='textarea' key={key} id={name} name={name} {...rest}/>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst Input: React.FC<FormItemPropsType> = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field id={name} key={key} name={name} {...rest} />\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst ErrorText: React.FC = (props) => {\r\n    return <div className={classes.error} >\r\n        {props.children}\r\n    </div>\r\n}\r\n    \r\n    \r\n\r\n\r\nexport default FormControlsWithFormik;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls__4c7Yh\",\"error\":\"FormControls_error__uKFST\",\"App\":\"FormControls_App__3XoIW\",\"input\":\"FormControls_input__229Xk\",\"forms_control\":\"FormControls_forms_control__1AmpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesArticle\":\"Messages_messagesArticle__28grW\",\"dialogs\":\"Messages_dialogs__lRzIq\",\"item\":\"Messages_item__nE3mS\",\"messages\":\"Messages_messages__1biBM\",\"active\":\"Messages_active__2Q2AD\",\"messages_form\":\"Messages_messages_form__YC3KW\",\"input\":\"Messages_input__Tg_ug\"};","import React from 'react';\r\nimport classes from './Messages.module.css';\r\nimport UserImg from '../../images/sideBar/user.svg';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\nexport const DialogItem: React.FC<PropsType> = ({name, id}) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={'/messages/' + id} className={`${classes.item} `} >\r\n                <img src={UserImg} alt=\"\" />{name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport classes from './Messages.module.css';\r\nimport UserImg from '../../images/sideBar/user.svg';\r\n\r\n\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message: React.FC<PropsType> = ({message}) => {\r\n    return (\r\n        <div className={classes.item}><img src={UserImg} alt=\"\" />{message}</div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport classes from './Messages.module.css';\r\n// import { Field, reduxForm, reset } from 'redux-form';\r\n// import { Textarea } from '../common/FormControls/FormControls';\r\n// import { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Formik, Form, } from 'formik';\r\nimport FormControlsWithFormik from '../common/FormControls/FormControlsWithFormik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\ntype PropsType = {\r\n    onSubmit: (values: { newMessageText: string }) => void\r\n    className?: string\r\n}\r\n\r\nexport const AddMessageFormik: React.FC<PropsType> = ({ onSubmit }) => {\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ newMessageText: '' }}\r\n            validationSchema={Yup.object({\r\n                newMessageText: Yup.string().required('Cannot send an empty message').max(50)\r\n            })}\r\n            onSubmit={(values: any, { resetForm }) => {\r\n                onSubmit(values);\r\n                resetForm();\r\n            }}\r\n\r\n        >\r\n            {\r\n                () => {\r\n                    return <Form>\r\n                        <FormControlsWithFormik className={classes.input}\r\n                            control='textarea'\r\n                            name='newMessageText'\r\n                            placeholder='Write your message'\r\n                        />\r\n                        <button className={classes.button} type='submit'>Send</button>\r\n                    </Form>\r\n\r\n                }\r\n            }\r\n        </Formik>\r\n    );\r\n}\r\n\r\n\r\n// let maxLength50 = maxLengthCreator(50);\r\n\r\n// const AddMessageForm = (props) => {\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit} >\r\n//             <Field className={classes.input}\r\n//                 component={Textarea}\r\n//                 validate={[required, maxLength50]}\r\n//                 name='newMessageText'\r\n//                 placeholder={'Write your message'} />\r\n//             <div className={classes.button}><button >Add Message</button></div>\r\n//         </form>\r\n//     );\r\n// }\r\n\r\n// const afterSubmit = (result, dispatch) =>\r\n//     dispatch(reset('message'));\r\n\r\n// const MessageReduxForm = reduxForm({\r\n//     // a unique name for the form\r\n//     form: 'message',\r\n//     onSubmitSuccess: afterSubmit,\r\n\r\n// })(AddMessageForm)\r\n\r\n\r\n","import { AppRootStateType } from './redux-store';\r\n\r\n\r\nexport const getDialogs = (state: AppRootStateType) => {\r\n    return state.messagesPage.dialogs\r\n}\r\nexport const getMessages = (state: AppRootStateType) => {\r\n    return state.messagesPage.messages\r\n}\r\n","import {Messages} from './Messages';\r\nimport { withAuthRedirect } from '../common/withAuthRedirect';\r\n\r\n\r\n\r\nexport default withAuthRedirect(Messages)\r\n\r\n","import React from 'react';\r\nimport classes from './Messages.module.css';\r\nimport { DialogItem } from './DialogItem';\r\nimport { Message } from './Message';\r\nimport { AddMessageFormik } from './MessagesForm';\r\nimport { AppRootStateType } from '../../reduxx/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionsMessagesReducer } from '../../reduxx/messages-reducer';\r\nimport { getDialogs, getMessages } from '../../reduxx/messages-selectors';\r\n\r\n\r\n\r\n\r\nexport const Messages: React.FC = () => {\r\n\r\n    const dialogs = useSelector(getDialogs)\r\n    const messages = useSelector(getMessages)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const dialogsElements = dialogs.map((dialog) => <DialogItem name={dialog.name} id={dialog.id} />);\r\n    const messagesElements = messages.map((message) => <Message message={message.message} />);\r\n\r\n\r\n    const addNewMessage = (values: { newMessageText: string }) => {\r\n        dispatch(actionsMessagesReducer.addMessageActionCreator(values.newMessageText))\r\n    }\r\n\r\n    return <div id={classes.messagesArticle} className={classes.messagesArticle}>\r\n        <div className={classes.dialogs}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={classes.messages}>\r\n            {messagesElements}\r\n            <AddMessageFormik className={classes.messages_form} onSubmit={addNewMessage} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\n"],"sourceRoot":""}