{"version":3,"sources":["components/common/FormControls/FormControls.module.css","components/common/FormControls/FormControlsWithFormik.js","components/Messages/Messages.module.css","components/Messages/Messages.jsx","components/Messages/MessagesContainer.jsx"],"names":["module","exports","Textarea","props","label","name","key","rest","className","classes","formik_controls","htmlFor","as","id","component","ErrorText","Input","CheckBoxes","options","field","map","option","Fragment","type","value","checked","includes","error","children","FormControlsWithFormik","control","DialogItem","to","item","src","UserImg","alt","Message","message","AddMessageFormik","initialValues","newMessageText","validationSchema","Yup","required","max","onSubmit","values","resetForm","formik","input","placeholder","button","Messages","isAuth","dialogsElements","dialogs","dialog","messagesElements","messages","messagesArticle","messages_form","addMessage","compose","connect","state","messagesPage","dispatch","addMessageActionCreator","withAuthRedirect"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,4BAA4B,IAAM,0BAA0B,MAAQ,4BAA4B,cAAgB,sC,wFCiBtLC,EAAW,SAACC,GAAW,IACjBC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,IAAQC,EADL,YACcJ,EADd,wBAExB,OACI,yBAAKK,UAAWC,IAAQC,iBACrB,2BAAOC,QAASN,GAAOD,GACvB,kBAAC,IAAD,eAAOQ,GAAG,WAAWN,IAAKA,EAAKO,GAAIR,EAAMA,KAAMA,GAAUE,IACzD,kBAAC,IAAD,CAAcF,KAAMA,EAAMS,UAAWC,MAI1CC,EAAQ,SAACb,GAAW,IACdC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,IAAQC,EADR,YACiBJ,EADjB,wBAErB,OACI,yBAAKK,UAAWC,IAAQC,iBACrB,2BAAOC,QAASN,GAAOD,GACvB,kBAAC,IAAD,eAAOS,GAAIR,EAAMC,IAAKA,EAAKD,KAAMA,GAAUE,IAC3C,kBAAC,IAAD,CAAcF,KAAMA,EAAMS,UAAWC,MAK1CE,EAAa,SAACd,GAAW,IACnBC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,KAAMa,EAAqBf,EAArBe,QAAYX,EADP,YACgBJ,EADhB,4BAE1B,OACI,yBAAKK,UAAWC,IAAQC,iBACrB,+BAAQN,GACR,kBAAC,IAAD,eAAOC,KAAMA,GAAUE,IAEd,YAAc,IAAZY,EAAW,EAAXA,MACA,OAAOD,EAAQE,KAAI,SAAAC,GACf,OACA,kBAAC,IAAMC,SAAP,CAAgBhB,IAAKe,EAAOf,KACzB,yCACGiB,KAAK,WACLV,GAAIQ,EAAOG,OACPL,EAHP,CAIGK,MAAOH,EAAOG,MACdC,QAASN,EAAMK,MAAME,SAASL,EAAOG,UAExC,2BAAOb,QAASU,EAAOG,OAAQH,EAAOf,YAQxD,kBAAC,IAAD,CAAcD,KAAMA,EAAMS,UAAWC,MAM1CA,EAAY,SAACZ,GACf,OAAO,yBAAKK,UAAWC,IAAQkB,OAC1BxB,EAAMyB,WAOAC,IA5EgB,SAAC1B,GAAW,IAC/B2B,EAAqB3B,EAArB2B,QAAYvB,EADkB,YACTJ,EADS,aAEtC,OAAQ2B,GACJ,IAAK,QACD,OAAO,kBAACd,EAAUT,GACtB,IAAK,WACD,OAAO,kBAACL,EAAaK,GACzB,IAAK,WACF,OAAO,kBAACU,EAAeV,GAC1B,QACI,OAAO,Q,oBCbnBP,EAAOC,QAAU,CAAC,gBAAkB,kCAAkC,QAAU,0BAA0B,KAAO,uBAAuB,SAAW,2BAA2B,OAAS,yBAAyB,cAAgB,gCAAgC,MAAQ,0B,gJCclQ8B,EAAa,SAAC5B,GAChB,OACI,6BACI,kBAAC,IAAD,CAAS6B,GAAI,aAAe7B,EAAMU,GAAIL,UAAS,UAAKC,IAAQwB,KAAb,MAC3C,yBAAKC,IAAKC,IAASC,IAAI,KAAMjC,EAAME,QAK7CgC,EAAU,SAAClC,GACb,OACI,yBAAKK,UAAWC,IAAQwB,MAAM,yBAAKC,IAAKC,IAASC,IAAI,KAAMjC,EAAMmC,UA+BnEC,EAAmB,SAACpC,GAEtB,OACI,kBAAC,IAAD,CACIqC,cAAe,CAAEC,eAAgB,IACjCC,iBAAkBC,IAAW,CACzBF,eAAgBE,MAAaC,SAAS,gCAAgCC,IAAI,MAE9EC,SAAU,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,UAChB7C,EAAM2C,SAASC,GACfC,OAKA,SAAAC,GACI,OAAO,kBAAC,IAAD,KACH,kBAACpB,EAAA,EAAD,CAAwBrB,UAAWC,IAAQyC,MACvCpB,QAAQ,WACRzB,KAAK,iBACL8C,YAAY,uBAEhB,4BAAQ3C,UAAWC,IAAQ2C,OAAQ7B,KAAK,UAAxC,aAST8B,EAvDE,SAAClD,GAEd,IAAKA,EAAMmD,OAAQ,OAAO,kBAAC,IAAD,CAAUtB,GAAG,WAEvC,IAAIuB,EAAkBpD,EAAMqD,QAAQpC,KAAI,SAACqC,GAAD,OAAY,kBAAC,EAAD,CAAYpD,KAAMoD,EAAOpD,KAAMQ,GAAI4C,EAAO5C,QAC1F6C,EAAmBvD,EAAMwD,SAASvC,KAAI,SAACkB,GAAD,OAAa,kBAAC,EAAD,CAASA,QAASA,EAAQA,aAQjF,OAAO,yBAAKzB,GAAIJ,IAAQmD,gBAAiBpD,UAAWC,IAAQmD,iBACxD,yBAAKpD,UAAWC,IAAQ+C,SACnBD,GAEL,yBAAK/C,UAAWC,IAAQkD,UACnBD,EACD,kBAAC,EAAD,CAAkBlD,UAAWC,IAAQoD,cAAef,SAVxC,SAACC,GACjB5C,EAAM2D,WAAWf,EAAON,sB,wBCdjBsB,sBACXC,aAjBoB,SAACC,GACrB,MAAO,CACHN,SAAUM,EAAMC,aAAaP,SAC7BH,QAASS,EAAMC,aAAaV,QAC5Bf,eAAgBwB,EAAMC,aAAazB,mBAIhB,SAAC0B,GACxB,MAAO,CACHL,WAAY,SAACrB,GACT0B,EAASC,YAAwB3B,SAOzC4B,IAFWN,CAGbV","file":"static/js/8.37518676.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls__4c7Yh\",\"error\":\"FormControls_error__uKFST\",\"App\":\"FormControls_App__3XoIW\",\"input\":\"FormControls_input__229Xk\",\"forms_control\":\"FormControls_forms_control__1AmpX\"};","import React from 'react';\r\nimport classes from './FormControls.module.css';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\nconst FormControlsWithFormik = (props) => {\r\n    const { control, ...rest } = props;\r\n    switch (control) {\r\n        case 'input':\r\n            return <Input {...rest} />\r\n        case 'textarea':\r\n            return <Textarea {...rest} />\r\n        case 'checkbox':\r\n           return <CheckBoxes {...rest} />\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nconst Textarea = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field as='textarea' key={key} id={name} name={name} {...rest}/>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\nconst Input = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field id={name} key={key} name={name} {...rest} />\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst CheckBoxes = (props) => {\r\n    const { label, name, options, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label>{label}</label>\r\n           <Field name={name} {...rest}>\r\n                {\r\n                    ({field}) => {\r\n                      return options.map(option => {\r\n                          return (\r\n                          <React.Fragment key={option.key}>\r\n                             <input \r\n                                type=\"checkbox\"\r\n                                id={option.value}\r\n                                {...field}\r\n                                value={option.value}\r\n                                checked={field.value.includes(option.value)}\r\n                             />\r\n                             <label htmlFor={option.value}>{option.key}</label>\r\n                          </React.Fragment>\r\n                            )\r\n                    \r\n                      })\r\n                    }\r\n                }\r\n           </Field>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst ErrorText = (props) => {\r\n    return <div className={classes.error} >\r\n        {props.children}\r\n    </div>\r\n}\r\n    \r\n    \r\n\r\n\r\nexport default FormControlsWithFormik;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesArticle\":\"Messages_messagesArticle__28grW\",\"dialogs\":\"Messages_dialogs__lRzIq\",\"item\":\"Messages_item__nE3mS\",\"messages\":\"Messages_messages__1biBM\",\"active\":\"Messages_active__2Q2AD\",\"messages_form\":\"Messages_messages_form__YC3KW\",\"input\":\"Messages_input__Tg_ug\"};","import React from 'react';\r\nimport classes from './Messages.module.css';\r\nimport UserImg from '../../images/sideBar/user.svg';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\n// import { Field, reduxForm, reset } from 'redux-form';\r\n// import { Textarea } from '../common/FormControls/FormControls';\r\n// import { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Formik, Form,  } from 'formik';\r\nimport FormControlsWithFormik from '../common/FormControls/FormControlsWithFormik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\n\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={'/messages/' + props.id} className={`${classes.item} `} >\r\n                <img src={UserImg} alt=\"\" />{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={classes.item}><img src={UserImg} alt=\"\" />{props.message}</div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nconst Messages = (props) => {\r\n\r\n    if (!props.isAuth) return <Redirect to='/login' />\r\n\r\n    let dialogsElements = props.dialogs.map((dialog) => <DialogItem name={dialog.name} id={dialog.id} />);\r\n    let messagesElements = props.messages.map((message) => <Message message={message.message} />);\r\n\r\n\r\n\r\n    let addNewMessage = (values) => {\r\n        props.addMessage(values.newMessageText);\r\n    }\r\n\r\n    return <div id={classes.messagesArticle} className={classes.messagesArticle}>\r\n        <div className={classes.dialogs}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={classes.messages}>\r\n            {messagesElements}\r\n            <AddMessageFormik className={classes.messages_form} onSubmit={addNewMessage} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst AddMessageFormik = (props) => {\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ newMessageText: '' }}\r\n            validationSchema={Yup.object({\r\n                newMessageText: Yup.string().required('Cannot send an empty message').max(50)\r\n            })}\r\n            onSubmit={(values, {resetForm}) => {\r\n                props.onSubmit(values);\r\n                resetForm();\r\n            }}\r\n            \r\n        >\r\n            {\r\n                formik => {\r\n                    return <Form>\r\n                        <FormControlsWithFormik className={classes.input}\r\n                            control='textarea'\r\n                            name='newMessageText'\r\n                            placeholder='Write your message'\r\n                        />\r\n                        <button className={classes.button} type='submit'>Send</button>\r\n                    </Form>\r\n\r\n                }\r\n            }\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default Messages;\r\n\r\n// let maxLength50 = maxLengthCreator(50);\r\n\r\n// const AddMessageForm = (props) => {\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit} >\r\n//             <Field className={classes.input}\r\n//                 component={Textarea}\r\n//                 validate={[required, maxLength50]}\r\n//                 name='newMessageText'\r\n//                 placeholder={'Write your message'} />\r\n//             <div className={classes.button}><button >Add Message</button></div>\r\n//         </form>\r\n//     );\r\n// }\r\n\r\n// const afterSubmit = (result, dispatch) =>\r\n//     dispatch(reset('message'));\r\n\r\n// const MessageReduxForm = reduxForm({\r\n//     // a unique name for the form\r\n//     form: 'message',\r\n//     onSubmitSuccess: afterSubmit,\r\n\r\n// })(AddMessageForm)\r\n\r\n\r\n","import React from 'react';\r\nimport classes from './Messages.module.css';\r\nimport UserImg from '../../images/sideBar/user.svg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { addMessageActionCreator, updateNewMessageTextActionCreator } from '../../reduxx/messages-reducer';\r\nimport Messages from './Messages';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../common/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messagesPage.messages,\r\n        dialogs: state.messagesPage.dialogs,\r\n        newMessageText: state.messagesPage.newMessageText,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageText) => {\r\n            dispatch(addMessageActionCreator(newMessageText))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Messages)\r\n\r\n"],"sourceRoot":""}