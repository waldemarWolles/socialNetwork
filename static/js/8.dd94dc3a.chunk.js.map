{"version":3,"sources":["components/common/FormControls/FormControlsWithFormik.js","components/common/FormControls/FormControls.module.css","components/common/withAuthRedirect.tsx","components/Messages/Messages.module.css","components/Messages/Messages.tsx","components/Messages/MessagesContainer.tsx"],"names":["Textarea","props","label","name","key","rest","className","classes","formik_controls","htmlFor","as","id","component","ErrorText","Input","CheckBoxes","options","field","map","option","Fragment","type","value","checked","includes","error","children","FormControlsWithFormik","control","module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","restProps","to","DialogItem","item","src","UserImg","alt","Message","message","AddMessageFormik","onSubmit","initialValues","newMessageText","validationSchema","Yup","required","max","values","resetForm","formik","input","placeholder","button","Messages","dialogs","messages","addMessage","dialogsElements","dialog","messagesElements","messagesArticle","messages_form","compose","messagesPage","dispatch","actionsMessagesReducer","addMessageActionCreator"],"mappings":"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","file":"static/js/8.dd94dc3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './FormControls.module.css';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\nconst FormControlsWithFormik = (props) => {\r\n    const { control, ...rest } = props;\r\n    switch (control) {\r\n        case 'input':\r\n            return <Input {...rest} />\r\n        case 'textarea':\r\n            return <Textarea {...rest} />\r\n        case 'checkbox':\r\n           return <CheckBoxes {...rest} />\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nconst Textarea = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field as='textarea' key={key} id={name} name={name} {...rest}/>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\nconst Input = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field id={name} key={key} name={name} {...rest} />\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst CheckBoxes = (props) => {\r\n    const { label, name, options, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label>{label}</label>\r\n           <Field name={name} {...rest}>\r\n                {\r\n                    ({field}) => {\r\n                      return options.map(option => {\r\n                          return (\r\n                          <React.Fragment key={option.key}>\r\n                             <input \r\n                                type=\"checkbox\"\r\n                                id={option.value}\r\n                                {...field}\r\n                                value={option.value}\r\n                                checked={field.value.includes(option.value)}\r\n                             />\r\n                             <label htmlFor={option.value}>{option.key}</label>\r\n                          </React.Fragment>\r\n                            )\r\n                    \r\n                      })\r\n                    }\r\n                }\r\n           </Field>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst ErrorText = (props) => {\r\n    return <div className={classes.error} >\r\n        {props.children}\r\n    </div>\r\n}\r\n    \r\n    \r\n\r\n\r\nexport default FormControlsWithFormik;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls__4c7Yh\",\"error\":\"FormControls_error__uKFST\",\"App\":\"FormControls_App__3XoIW\",\"input\":\"FormControls_input__229Xk\",\"forms_control\":\"FormControls_forms_control__1AmpX\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppRootStateType } from '../../reduxx/redux-store';\r\n\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    \r\n\r\n    const RedirectComponent: React.FC<MapStatePropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to='/login' />\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n\r\n\r\n\r\n    return connect<MapStatePropsType, unknown, WCP, AppRootStateType>(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesArticle\":\"Messages_messagesArticle__28grW\",\"dialogs\":\"Messages_dialogs__lRzIq\",\"item\":\"Messages_item__nE3mS\",\"messages\":\"Messages_messages__1biBM\",\"active\":\"Messages_active__2Q2AD\",\"messages_form\":\"Messages_messages_form__YC3KW\",\"input\":\"Messages_input__Tg_ug\"};","import React from 'react';\r\nimport classes from './Messages.module.css';\r\nimport UserImg from '../../images/sideBar/user.svg';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\n// import { Field, reduxForm, reset } from 'redux-form';\r\n// import { Textarea } from '../common/FormControls/FormControls';\r\n// import { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Formik, Form,  } from 'formik';\r\nimport FormControlsWithFormik from '../common/FormControls/FormControlsWithFormik';\r\nimport * as Yup from 'yup';\r\nimport { DialogsType, MessagesType } from '../../types/types';\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string,\r\n    id: number\r\n}\r\n\r\n\r\nconst DialogItem: React.FC<DialogItemPropsType> = ({name, id}) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={'/messages/' + id} className={`${classes.item} `} >\r\n                <img src={UserImg} alt=\"\" />{name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessagePropsType> = ({message}) => {\r\n    return (\r\n        <div className={classes.item}><img src={UserImg} alt=\"\" />{message}</div>\r\n    );\r\n}\r\n\r\ntype MessagesPropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    isAuth: boolean\r\n\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\n\r\nconst Messages: React.FC<MessagesPropsType> = ({dialogs, messages, addMessage}) => {\r\n\r\n\r\n    let dialogsElements = dialogs.map((dialog) => <DialogItem name={dialog.name} id={dialog.id} />);\r\n    let messagesElements = messages.map((message) => <Message message={message.message} />);\r\n\r\n    \r\n    let addNewMessage = (values: any)  => {\r\n        addMessage(values.newMessageText);\r\n    }\r\n\r\n    return <div id={classes.messagesArticle} className={classes.messagesArticle}>\r\n        <div className={classes.dialogs}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={classes.messages}>\r\n            {messagesElements}\r\n            <AddMessageFormik className={classes.messages_form} onSubmit={addNewMessage} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype AddMessageFormikPropsType = {\r\n    onSubmit: (newMessageText: string) => void\r\n    className?: string\r\n}\r\n\r\nconst AddMessageFormik: React.FC<AddMessageFormikPropsType> = ({onSubmit}) => {\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ newMessageText: '' }}\r\n            validationSchema={Yup.object({\r\n                newMessageText: Yup.string().required('Cannot send an empty message').max(50)\r\n            })}\r\n            onSubmit={(values: any, {resetForm}) => {\r\n                onSubmit(values);\r\n                resetForm();\r\n            }}\r\n            \r\n        >\r\n            {\r\n                formik => {\r\n                    return <Form>\r\n                        <FormControlsWithFormik className={classes.input}\r\n                            control='textarea'\r\n                            name='newMessageText'\r\n                            placeholder='Write your message'\r\n                        />\r\n                        <button className={classes.button} type='submit'>Send</button>\r\n                    </Form>\r\n\r\n                }\r\n            }\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default Messages;\r\n\r\n// let maxLength50 = maxLengthCreator(50);\r\n\r\n// const AddMessageForm = (props) => {\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit} >\r\n//             <Field className={classes.input}\r\n//                 component={Textarea}\r\n//                 validate={[required, maxLength50]}\r\n//                 name='newMessageText'\r\n//                 placeholder={'Write your message'} />\r\n//             <div className={classes.button}><button >Add Message</button></div>\r\n//         </form>\r\n//     );\r\n// }\r\n\r\n// const afterSubmit = (result, dispatch) =>\r\n//     dispatch(reset('message'));\r\n\r\n// const MessageReduxForm = reduxForm({\r\n//     // a unique name for the form\r\n//     form: 'message',\r\n//     onSubmitSuccess: afterSubmit,\r\n\r\n// })(AddMessageForm)\r\n\r\n\r\n","import { actionsMessagesReducer} from '../../reduxx/messages-reducer';\r\nimport Messages from './Messages';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../common/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppRootStateType } from '../../reduxx/redux-store';\r\nimport { DialogsType, MessagesType } from '../../types/types';\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.messagesPage.dialogs,\r\n        messages: state.messagesPage.messages,\r\n    }\r\n}\r\n\r\ntype DispatchPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any): DispatchPropsType => {\r\n    return {\r\n        addMessage: (newMessageText: string) => {\r\n            dispatch(actionsMessagesReducer.addMessageActionCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType,DispatchPropsType,OwnPropsType,AppRootStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Messages)\r\n\r\n"],"sourceRoot":""}