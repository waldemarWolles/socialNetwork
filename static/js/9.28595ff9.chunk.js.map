{"version":3,"sources":["components/common/FormControls/FormControlsWithFormik.tsx","components/common/FormControls/FormControls.module.css","components/Login/login.module.css","components/Login/LoginWithFormik.tsx","components/Login/Login.tsx"],"names":["Textarea","props","label","name","key","rest","className","classes","formik_controls","htmlFor","as","id","component","ErrorText","Input","error","children","FormControlsWithFormik","control","module","exports","LoginWithFormik","onSubmit","captchaUrl","errorMessage","validationSchema","Yup","email","required","password","rememberMe","captcha","initialValues","formik","type","placeholder","checkbox","checkbox_field","src","alt","disabled","isValid","Login","useSelector","getCaptchaUrl","isAuth","getIsAuth","getErrorMessage","dispatch","useDispatch","to","login","formData","loginThunk"],"mappings":"kLA8BMA,EAAyC,SAACC,GAAW,IAC/CC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,IAAQC,EADyB,YAChBJ,EADgB,wBAEtD,OACI,yBAAKK,UAAWC,IAAQC,iBACrB,2BAAOC,QAASN,GAAOD,GACvB,kBAAC,IAAD,eAAOQ,GAAG,WAAWN,IAAKA,EAAKO,GAAIR,EAAMA,KAAMA,GAAUE,IACzD,kBAAC,IAAD,CAAcF,KAAMA,EAAMS,UAAWC,MAM1CC,EAAqC,SAACb,GAAW,IAC3CC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,IAAQC,EADqB,YACZJ,EADY,wBAElD,OACI,yBAAKK,UAAWC,IAAQC,iBACrB,2BAAOC,QAASN,GAAOD,GACvB,kBAAC,IAAD,eAAOS,GAAIR,EAAMC,IAAKA,EAAKD,KAAMA,GAAUE,IAC3C,kBAAC,IAAD,CAAcF,KAAMA,EAAMS,UAAWC,MAM1CA,EAAsB,SAACZ,GACzB,OAAO,yBAAKK,UAAWC,IAAQQ,OAC1Bd,EAAMe,WAOAC,IA9CoE,SAAChB,GAAW,IACnFiB,EAAqBjB,EAArBiB,QAAYb,EADsE,YAC7DJ,EAD6D,aAE1F,OAAQiB,GACJ,IAAK,QACD,OAAO,kBAACJ,EAAUT,GACtB,IAAK,WACD,OAAO,kBAACL,EAAaK,GACzB,QACI,OAAO,Q,oBCxBnBc,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,4BAA4B,IAAM,0BAA0B,MAAQ,4BAA4B,cAAgB,sC,oBCA5LD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,UAAY,yBAAyB,WAAa,0BAA0B,SAAW,wBAAwB,eAAiB,gC,sJC2FhKC,EAxE8B,SAAC,GAIvC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,WACAC,EACI,EADJA,aASMC,EAAmBC,IAAW,CAClCC,MAAOD,MACJC,MAAM,wBACNC,SAAS,mBACZC,SAAUH,MAAaE,SAAS,mBAChCE,WAAYJ,MACZK,QAASL,QAGX,OACE,kBAAC,IAAD,CACEM,cAlBkB,CACpBL,MAAO,GACPE,SAAU,GACVC,YAAY,EACZC,QAAS,IAePN,iBAAkBA,EAClBH,SAAUA,IAET,SAACW,GACA,OACE,kBAAC,IAAD,KACE,kBAAChB,EAAA,EAAD,CACEC,QAAQ,QACRgB,KAAK,QACL/B,KAAK,QACLgC,YAAY,mBACZjC,MAAM,8BAER,kBAACe,EAAA,EAAD,CACEC,QAAQ,QACRgB,KAAK,WACL/B,KAAK,WACLgC,YAAY,sBACZjC,MAAM,mBAER,yBAAKI,UAAWC,IAAQ6B,UACtB,4CACA,kBAAC,IAAD,CACE9B,UAAWC,IAAQ8B,eACnBH,KAAK,WACL/B,KAAK,gBAGRoB,GAAc,yBAAKe,IAAKf,EAAYgB,IAAI,eACxChB,GACC,kBAACN,EAAA,EAAD,CACEC,QAAQ,QACRiB,YAAY,2BACZhC,KAAK,UACLD,MAAM,YAGV,4BAAQgC,KAAK,SAASM,UAAWP,EAAOQ,SAAxC,UAGCjB,O,wBCxEAkB,EAAkB,SAACzC,GAC9B,IAAMsB,EAAaoB,YAAYC,KACzBC,EAASF,YAAYG,KACrBtB,EAAemB,YAAYI,KAE3BC,EAAWC,cAcjB,OAAIJ,EACK,kBAAC,IAAD,CAAUK,GAAI,aAIrB,yBAAK5C,UAAWC,IAAQ4C,OACtB,qCACA,kBAAC,EAAD,CACE7B,SApBW,SAAC8B,GAEhBJ,EACEK,YACED,EAASzB,MACTyB,EAASvB,SACTuB,EAAStB,WACTsB,EAASrB,WAcTR,WAAYA,EACZC,aAAcA","file":"static/js/9.28595ff9.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './FormControls.module.css';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\ntype FormControlPropsType = {\r\n    control: 'input' | 'textarea'\r\n}\r\n\r\ntype FormItemPropsType = {\r\n    label?: string\r\n    name: string\r\n    key?: string\r\n    placeholder: string\r\n    type?: string\r\n    className?: string\r\n}\r\n\r\nconst FormControlsWithFormik: React.FC<FormControlPropsType & FormItemPropsType> = (props) => {\r\n    const { control, ...rest } = props;\r\n    switch (control) {\r\n        case 'input':\r\n            return <Input {...rest} />\r\n        case 'textarea':\r\n            return <Textarea {...rest} />\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nconst Textarea: React.FC<FormItemPropsType>  = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field as='textarea' key={key} id={name} name={name} {...rest}/>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst Input: React.FC<FormItemPropsType> = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field id={name} key={key} name={name} {...rest} />\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst ErrorText: React.FC = (props) => {\r\n    return <div className={classes.error} >\r\n        {props.children}\r\n    </div>\r\n}\r\n    \r\n    \r\n\r\n\r\nexport default FormControlsWithFormik;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls__4c7Yh\",\"error\":\"FormControls_error__uKFST\",\"App\":\"FormControls_App__3XoIW\",\"input\":\"FormControls_input__229Xk\",\"forms_control\":\"FormControls_forms_control__1AmpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__2N7EI\",\"form_item\":\"login_form_item__2hksY\",\"form_error\":\"login_form_error__1vVX3\",\"checkbox\":\"login_checkbox__1C5dA\",\"checkbox_field\":\"login_checkbox_field__TYFz1\"};","import React from 'react'\r\nimport * as Yup from 'yup'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport FormControlsWithFormik from '../common/FormControls/FormControlsWithFormik'\r\nimport classes from './login.module.css'\r\n\r\nexport type FormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string | null\r\n}\r\n\r\ntype PropsType = {\r\n  captchaUrl: string | null\r\n  errorMessage: string | null\r\n\r\n  onSubmit: (formData: FormDataType) => void\r\n}\r\n\r\nconst LoginWithFormik: React.FC<PropsType> = ({\r\n  onSubmit,\r\n  captchaUrl,\r\n  errorMessage,\r\n}) => {\r\n  const initialValues = {\r\n    email: '',\r\n    password: '',\r\n    rememberMe: false,\r\n    captcha: '',\r\n  }\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email('Invalid email format')\r\n      .required('Required field!'),\r\n    password: Yup.string().required('Required field!'),\r\n    rememberMe: Yup.bool(),\r\n    captcha: Yup.string(),\r\n  })\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n    >\r\n      {(formik) => {\r\n        return (\r\n          <Form>\r\n            <FormControlsWithFormik\r\n              control=\"input\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              label=\"Email: free@samuraijs.com\"\r\n            />\r\n            <FormControlsWithFormik\r\n              control=\"input\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              label=\"Password: free\"\r\n            />\r\n            <div className={classes.checkbox}>\r\n              <h4>Remember me?</h4>\r\n              <Field\r\n                className={classes.checkbox_field}\r\n                type=\"checkbox\"\r\n                name=\"rememberMe\"\r\n              />\r\n            </div>\r\n            {captchaUrl && <img src={captchaUrl} alt=\"captchaUrl\" />}\r\n            {captchaUrl && (\r\n              <FormControlsWithFormik\r\n                control=\"input\"\r\n                placeholder=\"Write symbols from image\"\r\n                name=\"captcha\"\r\n                label=\"Captcha\"\r\n              />\r\n            )}\r\n            <button type=\"submit\" disabled={!formik.isValid}>\r\n              Submit\r\n            </button>\r\n            {errorMessage}\r\n          </Form>\r\n        )\r\n      }}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default LoginWithFormik\r\n","import React from 'react'\r\nimport classes from './login.module.css'\r\nimport { Redirect } from 'react-router-dom'\r\nimport LoginWithFormik, { FormDataType } from './LoginWithFormik'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loginThunk } from '../../reduxx/auth-reducer'\r\nimport {\r\n  getCaptchaUrl,\r\n  getErrorMessage,\r\n  getIsAuth,\r\n} from '../../reduxx/auth-selectors'\r\n\r\nexport const Login: React.FC = (props) => {\r\n  const captchaUrl = useSelector(getCaptchaUrl)\r\n  const isAuth = useSelector(getIsAuth)\r\n  const errorMessage = useSelector(getErrorMessage)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmit = (formData: FormDataType) => {\r\n    debugger\r\n    dispatch(\r\n      loginThunk(\r\n        formData.email,\r\n        formData.password,\r\n        formData.rememberMe,\r\n        formData.captcha\r\n      )\r\n    )\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'} />\r\n  }\r\n\r\n  return (\r\n    <div className={classes.login}>\r\n      <h2>LOGIN</h2>\r\n      <LoginWithFormik\r\n        onSubmit={onSubmit}\r\n        captchaUrl={captchaUrl}\r\n        errorMessage={errorMessage}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}