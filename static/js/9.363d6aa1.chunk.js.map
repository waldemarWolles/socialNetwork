{"version":3,"sources":["components/common/FormControls/FormControlsWithFormik.js","components/common/FormControls/FormControls.module.css","components/Login/login.module.css","components/Login/LoginWithFormik.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["Textarea","props","label","name","key","rest","className","classes","formik_controls","htmlFor","as","id","component","ErrorText","Input","CheckBoxes","options","field","map","option","Fragment","type","value","checked","includes","error","children","FormControlsWithFormik","control","module","exports","LoginWithFormik","onSubmit","captchaUrl","errorMessage","validationSchema","Yup","email","required","password","rememberMe","initialValues","captcha","formik","placeholder","checkbox","checkbox_field","src","alt","disabled","isValid","Login","isAuth","loginThunk","to","login","formData","LoginContainer","this","React","Component","connect","state","auth"],"mappings":"iLAkBMA,EAAW,SAACC,GAAW,IACjBC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,IAAQC,EADL,YACcJ,EADd,wBAExB,OACI,yBAAKK,UAAWC,IAAQC,iBACrB,2BAAOC,QAASN,GAAOD,GACvB,kBAAC,IAAD,eAAOQ,GAAG,WAAWN,IAAKA,EAAKO,GAAIR,EAAMA,KAAMA,GAAUE,IACzD,kBAAC,IAAD,CAAcF,KAAMA,EAAMS,UAAWC,MAI1CC,EAAQ,SAACb,GAAW,IACdC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,IAAQC,EADR,YACiBJ,EADjB,wBAErB,OACI,yBAAKK,UAAWC,IAAQC,iBACrB,2BAAOC,QAASN,GAAOD,GACvB,kBAAC,IAAD,eAAOS,GAAIR,EAAMC,IAAKA,EAAKD,KAAMA,GAAUE,IAC3C,kBAAC,IAAD,CAAcF,KAAMA,EAAMS,UAAWC,MAK1CE,EAAa,SAACd,GAAW,IACnBC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,KAAMa,EAAqBf,EAArBe,QAAYX,EADP,YACgBJ,EADhB,4BAE1B,OACI,yBAAKK,UAAWC,IAAQC,iBACrB,+BAAQN,GACR,kBAAC,IAAD,eAAOC,KAAMA,GAAUE,IAEd,YAAc,IAAZY,EAAW,EAAXA,MACA,OAAOD,EAAQE,KAAI,SAAAC,GACf,OACA,kBAAC,IAAMC,SAAP,CAAgBhB,IAAKe,EAAOf,KACzB,yCACGiB,KAAK,WACLV,GAAIQ,EAAOG,OACPL,EAHP,CAIGK,MAAOH,EAAOG,MACdC,QAASN,EAAMK,MAAME,SAASL,EAAOG,UAExC,2BAAOb,QAASU,EAAOG,OAAQH,EAAOf,YAQxD,kBAAC,IAAD,CAAcD,KAAMA,EAAMS,UAAWC,MAM1CA,EAAY,SAACZ,GACf,OAAO,yBAAKK,UAAWC,IAAQkB,OAC1BxB,EAAMyB,WAOAC,IA5EgB,SAAC1B,GAAW,IAC/B2B,EAAqB3B,EAArB2B,QAAYvB,EADkB,YACTJ,EADS,aAEtC,OAAQ2B,GACJ,IAAK,QACD,OAAO,kBAACd,EAAUT,GACtB,IAAK,WACD,OAAO,kBAACL,EAAaK,GACzB,IAAK,WACF,OAAO,kBAACU,EAAeV,GAC1B,QACI,OAAO,Q,oBCbnBwB,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,4BAA4B,IAAM,0BAA0B,MAAQ,4BAA4B,cAAgB,sC,oBCA5LD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,WAAa,0BAA0B,SAAW,wBAAwB,eAAiB,gC,gKC0DnIC,EAvC+B,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,aAU9DC,EAAmBC,IAAW,CAClCC,MAAOD,MAAaC,MAAM,wBAAwBC,SAAS,mBAC3DC,SAAUH,MAAaE,SAAS,mBAChCE,WAAYJ,QAKd,OACE,kBAAC,IAAD,CAAQK,cAhBY,CACpBJ,MAAO,GACPE,SAAU,GACVC,YAAY,EACZE,QAAS,IAY6BP,iBAAkBA,EAAkBH,SAAUA,IAEhF,SAAAW,GACE,OAAO,kBAAC,IAAD,KACL,kBAAChB,EAAA,EAAD,CAAwBC,QAAQ,QAAQP,KAAK,QAAQlB,KAAK,QAAQyC,YAAY,mBAAmB1C,MAAM,8BACvG,kBAACyB,EAAA,EAAD,CAAwBC,QAAQ,QAAQP,KAAK,WAAWlB,KAAK,WAAWyC,YAAY,sBAAsB1C,MAAM,mBACjH,yBAAKI,UAAWC,IAAQsC,UACxB,4CACC,kBAAC,IAAD,CAAOvC,UAAWC,IAAQuC,eAAgBzB,KAAK,WAAWlB,KAAK,gBAE9D8B,GAAc,yBAAKc,IAAKd,EAAYe,IAAI,eACxCf,GAAc,kBAACN,EAAA,EAAD,CAAwBC,QAAQ,QAAQgB,YAAY,2BAA2BzC,KAAK,UAAUD,MAAM,YACnH,4BAAQmB,KAAK,SAAS4B,UAAWN,EAAOO,SAAxC,UACChB,OCtBEiB,EAjBoB,SAAC,GAAoD,IAAnDlB,EAAkD,EAAlDA,WAAYmB,EAAsC,EAAtCA,OAAQlB,EAA8B,EAA9BA,aAAcmB,EAAgB,EAAhBA,WAOrE,OAAID,EACK,kBAAC,IAAD,CAAUE,GAAI,MAGhB,yBAAKhD,UAAWC,IAAQgD,OAC7B,qCACA,kBAAC,EAAD,CAAiBvB,SAXF,SAACwB,GAEjBH,EAAWG,EAASnB,MAAOmB,EAASjB,SAAUiB,EAAShB,WAAYgB,EAASd,UAStCT,WAAYA,EAAYC,aAAcA,MCNzEuB,E,uKAGE,OAAO,kBAAC,EAAD,CACHxB,WAAYyB,KAAKzD,MAAMgC,WACvBmB,OAAQM,KAAKzD,MAAMmD,OACnBC,WAAYK,KAAKzD,MAAMoD,WACvBnB,aAAcwB,KAAKzD,MAAMiC,mB,GAPRyB,IAAMC,WAoBpBC,uBAPS,SAACC,GAAD,MAAiD,CACrE7B,WAAY6B,EAAMC,KAAK9B,WACvBmB,OAAQU,EAAMC,KAAKX,OACnBlB,aAAc4B,EAAMC,KAAK7B,gBAKR,CAAEmB,gBADRQ,CACsBJ","file":"static/js/9.363d6aa1.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './FormControls.module.css';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\nconst FormControlsWithFormik = (props) => {\r\n    const { control, ...rest } = props;\r\n    switch (control) {\r\n        case 'input':\r\n            return <Input {...rest} />\r\n        case 'textarea':\r\n            return <Textarea {...rest} />\r\n        case 'checkbox':\r\n           return <CheckBoxes {...rest} />\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nconst Textarea = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field as='textarea' key={key} id={name} name={name} {...rest}/>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\nconst Input = (props) => {\r\n    const { label, name, key, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label htmlFor={name}>{label}</label>\r\n           <Field id={name} key={key} name={name} {...rest} />\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst CheckBoxes = (props) => {\r\n    const { label, name, options, ...rest } = props;\r\n    return (\r\n        <div className={classes.formik_controls}>\r\n           <label>{label}</label>\r\n           <Field name={name} {...rest}>\r\n                {\r\n                    ({field}) => {\r\n                      return options.map(option => {\r\n                          return (\r\n                          <React.Fragment key={option.key}>\r\n                             <input \r\n                                type=\"checkbox\"\r\n                                id={option.value}\r\n                                {...field}\r\n                                value={option.value}\r\n                                checked={field.value.includes(option.value)}\r\n                             />\r\n                             <label htmlFor={option.value}>{option.key}</label>\r\n                          </React.Fragment>\r\n                            )\r\n                    \r\n                      })\r\n                    }\r\n                }\r\n           </Field>\r\n           <ErrorMessage name={name} component={ErrorText} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst ErrorText = (props) => {\r\n    return <div className={classes.error} >\r\n        {props.children}\r\n    </div>\r\n}\r\n    \r\n    \r\n\r\n\r\nexport default FormControlsWithFormik;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls__4c7Yh\",\"error\":\"FormControls_error__uKFST\",\"App\":\"FormControls_App__3XoIW\",\"input\":\"FormControls_input__229Xk\",\"forms_control\":\"FormControls_forms_control__1AmpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_item\":\"login_form_item__2hksY\",\"form_error\":\"login_form_error__1vVX3\",\"checkbox\":\"login_checkbox__1C5dA\",\"checkbox_field\":\"login_checkbox_field__TYFz1\"};","import React from 'react';\r\nimport * as Yup from 'yup';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport FormControlsWithFormik from '../common/FormControls/FormControlsWithFormik';\r\nimport classes from './login.module.css';\r\n\r\nexport type FormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string | null\r\n}\r\n\r\ntype PropsType = {\r\n  captchaUrl: string | null\r\n  errorMessage: string | null\r\n\r\n  onSubmit: (formData: FormDataType) => void\r\n}\r\n\r\n const LoginWithFormik: React.FC<PropsType> = ({onSubmit, captchaUrl, errorMessage}) => {\r\n\r\n  \r\n  const initialValues = {\r\n    email: '',\r\n    password: '',\r\n    rememberMe: false,\r\n    captcha: ''\r\n  }\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email('Invalid email format').required('Required field!'),\r\n    password: Yup.string().required('Required field!'),\r\n    rememberMe: Yup.bool(),\r\n  });\r\n\r\n  \r\n\r\n  return (\r\n    <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n      {\r\n        formik => {\r\n          return <Form>\r\n            <FormControlsWithFormik control='input' type='email' name='email' placeholder='Enter your email' label='Email: free@samuraijs.com' />\r\n            <FormControlsWithFormik control='input' type='password' name='password' placeholder='Enter your password' label='Password: free' />\r\n           <div className={classes.checkbox}>\r\n           <h4>Remember me?</h4>\r\n            <Field className={classes.checkbox_field} type='checkbox' name='rememberMe'/>\r\n           </div>\r\n            {captchaUrl && <img src={captchaUrl} alt='captchaUrl'/> }\r\n            {captchaUrl && <FormControlsWithFormik control='input' placeholder='Write symbols from image' name='captcha' label='Captcha'/>}\r\n            <button type='submit' disabled={!formik.isValid}>Submit</button>\r\n            {errorMessage}\r\n          </Form>\r\n        }\r\n      }\r\n    </Formik>);\r\n}\r\n\r\nexport default LoginWithFormik;\r\n","import React from 'react';\r\nimport classes from './login.module.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport LoginWithFormik, { FormDataType } from './LoginWithFormik';\r\n\r\ntype PropsType = {\r\n  captchaUrl: string | null\r\n  isAuth: boolean \r\n  errorMessage: string | null\r\n  loginThunk: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\r\n}\r\n\r\n\r\nconst Login: React.FC<PropsType> = ({captchaUrl, isAuth, errorMessage, loginThunk}) => {\r\n\r\n  const onSubmit = (formData: FormDataType) => {\r\n    debugger\r\n   loginThunk(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={'/'} />\r\n  } \r\n\r\n  return <div className={classes.login} >\r\n    <h2>LOGIN</h2>\r\n    <LoginWithFormik onSubmit={onSubmit} captchaUrl={captchaUrl} errorMessage={errorMessage}/>\r\n  </div>\r\n  }\r\n\r\nexport default Login;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loginThunk } from '../../reduxx/auth-reducer';\r\nimport { AppRootStateType } from '../../reduxx/redux-store';\r\nimport Login from './Login';\r\n\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n    errorMessage: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    loginThunk: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass LoginContainer extends React.Component<PropsType> {\r\n\r\n    render() {\r\n        return <Login\r\n            captchaUrl={this.props.captchaUrl}\r\n            isAuth={this.props.isAuth}\r\n            loginThunk={this.props.loginThunk}\r\n            errorMessage={this.props.errorMessage}\r\n             />\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n    errorMessage: state.auth.errorMessage\r\n})\r\n\r\n\r\nexport default connect<MapStatePropsType,MapDispatchPropsType,OwnPropsType,AppRootStateType>(\r\n    mapStateToProps, { loginThunk })(LoginContainer);"],"sourceRoot":""}